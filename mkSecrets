#!/bin/bash

# set static network via netplan

exePath="$(dirname -- "${BASH_SOURCE[0]}")"

template=""
path=""
nogitignore=0

# Function to display usage information
usage() {
    echo "Usage: $0 <options>"
    echo -e "\t-t <templateFile>  Use a template for secrets fron given path [default: ./secrets.tmpl]"
    echo -e "\t-o <outputPath>    Save the secrets-file .secrets in given path [default: ./.secrets]"
    echo -e "\t-n                 no .gitignore setup [default: set .secrets in .gitignore]"
    echo -e "\t-h, ?              Display this help message"
    echo -e "Project page: https://github.com/peedy2495/mkSecrets"
    exit
}

# Parse command-line options
while getopts ":t:o:nh" opt; do
    case "${opt}" in
        t)
            template=${OPTARG}
            ;;
        o)
            path=${OPTARG}
            ;;
        n)
            nogitignore=1
            ;;
        h|?)
            usage
            ;;
        *)
            usage
            ;;
    esac
done

# Manually check for '?' without a dash
for arg in "$@"; do
    if [[ "$arg" == "?" ]]; then
        usage
    fi
done

# Shift off the options and optional --
shift $((OPTIND-1))

if [[ $# -gt 0 ]]; then
    echo "Unexpected arguments: $@"
    usage
fi

# Check if template is set
if [ -z "$template" ]; then
    template="./secrets.tmpl"
fi

# Check if path is set
if [ -z "$path" ]; then
    path="."
fi

# Check if teplate is present.
if [ ! -f $template ]; then
    echo -e "\e[31mFAIL\e[0m \tsecrets template $template not found!"
    exit 1
fi

# Check if path is present.
if [ ! -d $path ]; then
    echo -e "\e[31mFAIL\e[0m \tpath \"$path\" for writing .secrets not found!"
    exit 1
fi

# Modifiying .gitignore?

if [ $nogitignore -eq 0 ]; then
    if [ ! -f .gitignore ]; then
        echo -e "\e[33mWARN\e[0m \tno .gitignore file found in current folder!"
    else
        if ! grep -q '^\.secrets$' .gitignore; then
            echo -e "\e[32mINFO\e[0m \t.gitignore has been modified: +.secrets"
            echo ".secrets" >>.gitignore
        else
            echo -e "\e[32mINFO\e[0m \t.gitignore is up to date"
        fi
    fi
fi

source $template
echo "# This file was generated by mkSecrets"> $path/.secrets
echo ""

# Let's do the secrets
for secret in "${!secrets[@]}"; do
    echo -e "\e[34mmkPasswd\e[0m \e[33m$secret\e[0m ${secrets[$secret]%%;*}"

    if [ "${secrets[$secret]#*;}" = "insecure" ]; then
        secure=''; n=''
    else
        secure='-s'; n='\n'
    fi

    while true; do
        echo -ne "\e[96mSet\e[0m\t $secret:"
        read $secure secretValue
        echo -ne "$n\e[95mConfirm\e[0m\t $secret:"
        read $secure secretValueCheck
        echo -e "\n"
        if [ "$secretValue" = "$secretValueCheck" ]; then
            echo "$secret=\"$secretValueCheck\"" >> $path/.secrets
            break
        else
            echo -e "\e[31mFAIL\e[0m \tSorry, inputs do not match. Try again.\n"
        fi
    done
done